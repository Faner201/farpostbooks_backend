x-logging: &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<time>\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2},d{3}) (?P<message>(?s:.*))$$'

version: '3.9'

services:
  api:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile
    image: farpostbooks_backend:${FARPOSTBOOKS_BACKEND_VERSION:-latest}
    volumes:
    - images:/app/src/images
    networks:
    - backnet
    restart: always
    env_file:
    - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      FARPOSTBOOKS_BACKEND_HOST: 0.0.0.0
      FARPOSTBOOKS_BACKEND_DB_HOST: farpostbooks_backend-db
      FARPOSTBOOKS_BACKEND_DB_PORT: 5432
      FARPOSTBOOKS_BACKEND_DB_USER: farpostbooks_backend
      FARPOSTBOOKS_BACKEND_DB_PASS: farpostbooks_backend
      FARPOSTBOOKS_BACKEND_DB_BASE: farpostbooks_backend
    logging: *default-logging

  db:
    image: postgres:13.8-bullseye
    networks:
    - backnet
    hostname: farpostbooks_backend-db
    environment:
      POSTGRES_PASSWORD: "farpostbooks_backend"
      POSTGRES_USER: "farpostbooks_backend"
      POSTGRES_DB: "farpostbooks_backend"
    volumes:
    - farpostbooks_backend-db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: pg_isready -U farpostbooks_backend
      interval: 2s
      timeout: 3s
      retries: 40

  redis:
    image: redis:latest
    networks:
    - backnet
    volumes:
    - ./redis_data:/data

  arq:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile
    networks:
    - backnet
    env_file:
    - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    entrypoint: "arq farpostbooks_backend.services.scheduler.WorkerSettings"

  migrator:
    image: farpostbooks_backend:${FARPOSTBOOKS_BACKEND_VERSION:-latest}
    networks:
    - backnet
    restart: "no"
    command: aerich upgrade
    environment:
      FARPOSTBOOKS_BACKEND_DB_HOST: farpostbooks_backend-db
      FARPOSTBOOKS_BACKEND_DB_PORT: 5432
      FARPOSTBOOKS_BACKEND_DB_USER: farpostbooks_backend
      FARPOSTBOOKS_BACKEND_DB_PASS: farpostbooks_backend
      FARPOSTBOOKS_BACKEND_DB_BASE: farpostbooks_backend
    depends_on:
      db:
        condition: service_healthy

  loki:
    image: grafana/loki:2.6.1
    networks:
    - backnet
    command: -config.file=/etc/loki/local-config.yaml
    ports:
    - "3100:3100"

  prometheus:
    image: prom/prometheus:v2.39.1
    networks:
    - backnet
    ports:
    - "9090:9090"
    volumes:
    - ./etc/prometheus:/workspace
    command:
    - --config.file=/workspace/prometheus.yml
    - --enable-feature=exemplar-storage
    depends_on:
    - loki
    logging: *default-logging

  tempo:
    image: grafana/tempo:1.5.0
    networks:
    - backnet
    command: ["--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false", "--search.enabled=true"]
    ports:
    - "14250:14250"
    depends_on:
    - loki
    logging: *default-logging

  grafana:
    image: grafana/grafana:9.1.7
    networks:
    - backnet
    ports:
    - "3000:3000"
    volumes:
    - ./etc/grafana/:/etc/grafana/provisioning/datasources
    - ./etc/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
    - ./etc/dashboards:/etc/grafana/dashboards
    depends_on:
    - loki
    - prometheus
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
    logging: *default-logging



volumes:
  farpostbooks_backend-db-data:
    name: farpostbooks_backend-db-data
  images:
    name: images

networks:
  backnet:
    driver: bridge
